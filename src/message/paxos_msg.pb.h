// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: paxos_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_paxos_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_paxos_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_paxos_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_paxos_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_paxos_5fmsg_2eproto;
namespace elect {
class PaxosMsg;
class PaxosMsgDefaultTypeInternal;
extern PaxosMsgDefaultTypeInternal _PaxosMsg_default_instance_;
}  // namespace elect
PROTOBUF_NAMESPACE_OPEN
template<> ::elect::PaxosMsg* Arena::CreateMaybeMessage<::elect::PaxosMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace elect {

enum PaxosMsg_Type : int {
  PaxosMsg_Type_NONE = 0,
  PaxosMsg_Type_PREPARE_REQUEST = 1,
  PaxosMsg_Type_PREPARE_REJECT = 2,
  PaxosMsg_Type_PREPARE_ACCEPTED = 3,
  PaxosMsg_Type_PREPARE_OPENING = 4,
  PaxosMsg_Type_PROPOSE_REQUEST = 5,
  PaxosMsg_Type_PROPOSE_ACCEPTED = 6,
  PaxosMsg_Type_PROPOSE_REJECT = 7,
  PaxosMsg_Type_LEAEN_CHOSEN = 8,
  PaxosMsg_Type_ONLINE_TO_CONNECT = 9,
  PaxosMsg_Type_PaxosMsg_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PaxosMsg_Type_PaxosMsg_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PaxosMsg_Type_IsValid(int value);
constexpr PaxosMsg_Type PaxosMsg_Type_Type_MIN = PaxosMsg_Type_NONE;
constexpr PaxosMsg_Type PaxosMsg_Type_Type_MAX = PaxosMsg_Type_ONLINE_TO_CONNECT;
constexpr int PaxosMsg_Type_Type_ARRAYSIZE = PaxosMsg_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaxosMsg_Type_descriptor();
template<typename T>
inline const std::string& PaxosMsg_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PaxosMsg_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PaxosMsg_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PaxosMsg_Type_descriptor(), enum_t_value);
}
inline bool PaxosMsg_Type_Parse(
    const std::string& name, PaxosMsg_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PaxosMsg_Type>(
    PaxosMsg_Type_descriptor(), name, value);
}
// ===================================================================

class PaxosMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:elect.PaxosMsg) */ {
 public:
  inline PaxosMsg() : PaxosMsg(nullptr) {};
  virtual ~PaxosMsg();

  PaxosMsg(const PaxosMsg& from);
  PaxosMsg(PaxosMsg&& from) noexcept
    : PaxosMsg() {
    *this = ::std::move(from);
  }

  inline PaxosMsg& operator=(const PaxosMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaxosMsg& operator=(PaxosMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PaxosMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PaxosMsg* internal_default_instance() {
    return reinterpret_cast<const PaxosMsg*>(
               &_PaxosMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PaxosMsg& a, PaxosMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(PaxosMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaxosMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaxosMsg* New() const final {
    return CreateMaybeMessage<PaxosMsg>(nullptr);
  }

  PaxosMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaxosMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PaxosMsg& from);
  void MergeFrom(const PaxosMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaxosMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "elect.PaxosMsg";
  }
  protected:
  explicit PaxosMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_paxos_5fmsg_2eproto);
    return ::descriptor_table_paxos_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PaxosMsg_Type Type;
  static constexpr Type NONE =
    PaxosMsg_Type_NONE;
  static constexpr Type PREPARE_REQUEST =
    PaxosMsg_Type_PREPARE_REQUEST;
  static constexpr Type PREPARE_REJECT =
    PaxosMsg_Type_PREPARE_REJECT;
  static constexpr Type PREPARE_ACCEPTED =
    PaxosMsg_Type_PREPARE_ACCEPTED;
  static constexpr Type PREPARE_OPENING =
    PaxosMsg_Type_PREPARE_OPENING;
  static constexpr Type PROPOSE_REQUEST =
    PaxosMsg_Type_PROPOSE_REQUEST;
  static constexpr Type PROPOSE_ACCEPTED =
    PaxosMsg_Type_PROPOSE_ACCEPTED;
  static constexpr Type PROPOSE_REJECT =
    PaxosMsg_Type_PROPOSE_REJECT;
  static constexpr Type LEAEN_CHOSEN =
    PaxosMsg_Type_LEAEN_CHOSEN;
  static constexpr Type ONLINE_TO_CONNECT =
    PaxosMsg_Type_ONLINE_TO_CONNECT;
  static inline bool Type_IsValid(int value) {
    return PaxosMsg_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    PaxosMsg_Type_Type_MIN;
  static constexpr Type Type_MAX =
    PaxosMsg_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    PaxosMsg_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return PaxosMsg_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return PaxosMsg_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return PaxosMsg_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 2,
    kLeaseOwnerFieldNumber = 5,
    kProposalIdFieldNumber = 3,
    kAcceptedProposalIdFieldNumber = 4,
    kDurationFieldNumber = 6,
    kExpireTimeFieldNumber = 7,
    kVersionFieldNumber = 8,
    kTypeFieldNumber = 1,
  };
  // string node_id = 2;
  void clear_node_id();
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_node_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_node_id(
      std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // string lease_owner = 5;
  void clear_lease_owner();
  const std::string& lease_owner() const;
  void set_lease_owner(const std::string& value);
  void set_lease_owner(std::string&& value);
  void set_lease_owner(const char* value);
  void set_lease_owner(const char* value, size_t size);
  std::string* mutable_lease_owner();
  std::string* release_lease_owner();
  void set_allocated_lease_owner(std::string* lease_owner);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_lease_owner();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_lease_owner(
      std::string* lease_owner);
  private:
  const std::string& _internal_lease_owner() const;
  void _internal_set_lease_owner(const std::string& value);
  std::string* _internal_mutable_lease_owner();
  public:

  // uint64 proposal_id = 3;
  void clear_proposal_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 proposal_id() const;
  void set_proposal_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_proposal_id() const;
  void _internal_set_proposal_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 accepted_proposal_id = 4;
  void clear_accepted_proposal_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 accepted_proposal_id() const;
  void set_accepted_proposal_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_accepted_proposal_id() const;
  void _internal_set_accepted_proposal_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 duration = 6;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint64 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 expire_time = 7;
  void clear_expire_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 expire_time() const;
  void set_expire_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expire_time() const;
  void _internal_set_expire_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 version = 8;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .elect.PaxosMsg.Type type = 1;
  void clear_type();
  ::elect::PaxosMsg_Type type() const;
  void set_type(::elect::PaxosMsg_Type value);
  private:
  ::elect::PaxosMsg_Type _internal_type() const;
  void _internal_set_type(::elect::PaxosMsg_Type value);
  public:

  // @@protoc_insertion_point(class_scope:elect.PaxosMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lease_owner_;
  ::PROTOBUF_NAMESPACE_ID::uint64 proposal_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 accepted_proposal_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expire_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_paxos_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PaxosMsg

// .elect.PaxosMsg.Type type = 1;
inline void PaxosMsg::clear_type() {
  type_ = 0;
}
inline ::elect::PaxosMsg_Type PaxosMsg::_internal_type() const {
  return static_cast< ::elect::PaxosMsg_Type >(type_);
}
inline ::elect::PaxosMsg_Type PaxosMsg::type() const {
  // @@protoc_insertion_point(field_get:elect.PaxosMsg.type)
  return _internal_type();
}
inline void PaxosMsg::_internal_set_type(::elect::PaxosMsg_Type value) {
  
  type_ = value;
}
inline void PaxosMsg::set_type(::elect::PaxosMsg_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:elect.PaxosMsg.type)
}

// string node_id = 2;
inline void PaxosMsg::clear_node_id() {
  node_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PaxosMsg::node_id() const {
  // @@protoc_insertion_point(field_get:elect.PaxosMsg.node_id)
  return _internal_node_id();
}
inline void PaxosMsg::set_node_id(const std::string& value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:elect.PaxosMsg.node_id)
}
inline std::string* PaxosMsg::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:elect.PaxosMsg.node_id)
  return _internal_mutable_node_id();
}
inline const std::string& PaxosMsg::_internal_node_id() const {
  return node_id_.Get();
}
inline void PaxosMsg::_internal_set_node_id(const std::string& value) {
  
  node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PaxosMsg::set_node_id(std::string&& value) {
  
  node_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elect.PaxosMsg.node_id)
}
inline void PaxosMsg::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elect.PaxosMsg.node_id)
}
inline void PaxosMsg::set_node_id(const char* value,
    size_t size) {
  
  node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elect.PaxosMsg.node_id)
}
inline std::string* PaxosMsg::_internal_mutable_node_id() {
  
  return node_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PaxosMsg::release_node_id() {
  // @@protoc_insertion_point(field_release:elect.PaxosMsg.node_id)
  return node_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PaxosMsg::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elect.PaxosMsg.node_id)
}
inline std::string* PaxosMsg::unsafe_arena_release_node_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:elect.PaxosMsg.node_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return node_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PaxosMsg::unsafe_arena_set_allocated_node_id(
    std::string* node_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      node_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:elect.PaxosMsg.node_id)
}

// uint64 proposal_id = 3;
inline void PaxosMsg::clear_proposal_id() {
  proposal_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PaxosMsg::_internal_proposal_id() const {
  return proposal_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PaxosMsg::proposal_id() const {
  // @@protoc_insertion_point(field_get:elect.PaxosMsg.proposal_id)
  return _internal_proposal_id();
}
inline void PaxosMsg::_internal_set_proposal_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  proposal_id_ = value;
}
inline void PaxosMsg::set_proposal_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:elect.PaxosMsg.proposal_id)
}

// uint64 accepted_proposal_id = 4;
inline void PaxosMsg::clear_accepted_proposal_id() {
  accepted_proposal_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PaxosMsg::_internal_accepted_proposal_id() const {
  return accepted_proposal_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PaxosMsg::accepted_proposal_id() const {
  // @@protoc_insertion_point(field_get:elect.PaxosMsg.accepted_proposal_id)
  return _internal_accepted_proposal_id();
}
inline void PaxosMsg::_internal_set_accepted_proposal_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  accepted_proposal_id_ = value;
}
inline void PaxosMsg::set_accepted_proposal_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_accepted_proposal_id(value);
  // @@protoc_insertion_point(field_set:elect.PaxosMsg.accepted_proposal_id)
}

// string lease_owner = 5;
inline void PaxosMsg::clear_lease_owner() {
  lease_owner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PaxosMsg::lease_owner() const {
  // @@protoc_insertion_point(field_get:elect.PaxosMsg.lease_owner)
  return _internal_lease_owner();
}
inline void PaxosMsg::set_lease_owner(const std::string& value) {
  _internal_set_lease_owner(value);
  // @@protoc_insertion_point(field_set:elect.PaxosMsg.lease_owner)
}
inline std::string* PaxosMsg::mutable_lease_owner() {
  // @@protoc_insertion_point(field_mutable:elect.PaxosMsg.lease_owner)
  return _internal_mutable_lease_owner();
}
inline const std::string& PaxosMsg::_internal_lease_owner() const {
  return lease_owner_.Get();
}
inline void PaxosMsg::_internal_set_lease_owner(const std::string& value) {
  
  lease_owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PaxosMsg::set_lease_owner(std::string&& value) {
  
  lease_owner_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:elect.PaxosMsg.lease_owner)
}
inline void PaxosMsg::set_lease_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lease_owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:elect.PaxosMsg.lease_owner)
}
inline void PaxosMsg::set_lease_owner(const char* value,
    size_t size) {
  
  lease_owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:elect.PaxosMsg.lease_owner)
}
inline std::string* PaxosMsg::_internal_mutable_lease_owner() {
  
  return lease_owner_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PaxosMsg::release_lease_owner() {
  // @@protoc_insertion_point(field_release:elect.PaxosMsg.lease_owner)
  return lease_owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PaxosMsg::set_allocated_lease_owner(std::string* lease_owner) {
  if (lease_owner != nullptr) {
    
  } else {
    
  }
  lease_owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lease_owner,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:elect.PaxosMsg.lease_owner)
}
inline std::string* PaxosMsg::unsafe_arena_release_lease_owner() {
  // @@protoc_insertion_point(field_unsafe_arena_release:elect.PaxosMsg.lease_owner)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return lease_owner_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PaxosMsg::unsafe_arena_set_allocated_lease_owner(
    std::string* lease_owner) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (lease_owner != nullptr) {
    
  } else {
    
  }
  lease_owner_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      lease_owner, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:elect.PaxosMsg.lease_owner)
}

// uint64 duration = 6;
inline void PaxosMsg::clear_duration() {
  duration_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PaxosMsg::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PaxosMsg::duration() const {
  // @@protoc_insertion_point(field_get:elect.PaxosMsg.duration)
  return _internal_duration();
}
inline void PaxosMsg::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  duration_ = value;
}
inline void PaxosMsg::set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:elect.PaxosMsg.duration)
}

// uint64 expire_time = 7;
inline void PaxosMsg::clear_expire_time() {
  expire_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PaxosMsg::_internal_expire_time() const {
  return expire_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PaxosMsg::expire_time() const {
  // @@protoc_insertion_point(field_get:elect.PaxosMsg.expire_time)
  return _internal_expire_time();
}
inline void PaxosMsg::_internal_set_expire_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  expire_time_ = value;
}
inline void PaxosMsg::set_expire_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expire_time(value);
  // @@protoc_insertion_point(field_set:elect.PaxosMsg.expire_time)
}

// uint64 version = 8;
inline void PaxosMsg::clear_version() {
  version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PaxosMsg::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PaxosMsg::version() const {
  // @@protoc_insertion_point(field_get:elect.PaxosMsg.version)
  return _internal_version();
}
inline void PaxosMsg::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  version_ = value;
}
inline void PaxosMsg::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:elect.PaxosMsg.version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace elect

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::elect::PaxosMsg_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::elect::PaxosMsg_Type>() {
  return ::elect::PaxosMsg_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_paxos_5fmsg_2eproto
