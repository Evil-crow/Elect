// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: paxos_msg.proto

#include "paxos_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace elect {
class PaxosMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PaxosMsg> _instance;
} _PaxosMsg_default_instance_;
}  // namespace elect
static void InitDefaultsscc_info_PaxosMsg_paxos_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::elect::_PaxosMsg_default_instance_;
    new (ptr) ::elect::PaxosMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::elect::PaxosMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PaxosMsg_paxos_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PaxosMsg_paxos_5fmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_paxos_5fmsg_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_paxos_5fmsg_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_paxos_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_paxos_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::elect::PaxosMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::elect::PaxosMsg, type_),
  PROTOBUF_FIELD_OFFSET(::elect::PaxosMsg, node_id_),
  PROTOBUF_FIELD_OFFSET(::elect::PaxosMsg, addr_),
  PROTOBUF_FIELD_OFFSET(::elect::PaxosMsg, proposal_id_),
  PROTOBUF_FIELD_OFFSET(::elect::PaxosMsg, accepted_proposal_id_),
  PROTOBUF_FIELD_OFFSET(::elect::PaxosMsg, lease_owner_),
  PROTOBUF_FIELD_OFFSET(::elect::PaxosMsg, duration_),
  PROTOBUF_FIELD_OFFSET(::elect::PaxosMsg, expire_time_),
  PROTOBUF_FIELD_OFFSET(::elect::PaxosMsg, version_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::elect::PaxosMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::elect::_PaxosMsg_default_instance_),
};

const char descriptor_table_protodef_paxos_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017paxos_msg.proto\022\005elect\"\234\003\n\010PaxosMsg\022\"\n"
  "\004type\030\001 \001(\0162\024.elect.PaxosMsg.Type\022\017\n\007nod"
  "e_id\030\002 \001(\t\022\014\n\004addr\030\003 \001(\t\022\023\n\013proposal_id\030"
  "\004 \001(\004\022\034\n\024accepted_proposal_id\030\005 \001(\004\022\023\n\013l"
  "ease_owner\030\006 \001(\t\022\020\n\010duration\030\007 \001(\004\022\023\n\013ex"
  "pire_time\030\010 \001(\004\022\017\n\007version\030\t \001(\004\"\314\001\n\004Typ"
  "e\022\010\n\004NONE\020\000\022\023\n\017PREPARE_REQUEST\020\001\022\022\n\016PREP"
  "ARE_REJECT\020\002\022\024\n\020PREPARE_ACCEPTED\020\003\022\023\n\017PR"
  "EPARE_OPENING\020\004\022\023\n\017PROPOSE_REQUEST\020\005\022\024\n\020"
  "PROPOSE_ACCEPTED\020\006\022\022\n\016PROPOSE_REJECT\020\007\022\020"
  "\n\014LEAEN_CHOSEN\020\010\022\025\n\021ONLINE_TO_CONNECT\020\tb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_paxos_5fmsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_paxos_5fmsg_2eproto_sccs[1] = {
  &scc_info_PaxosMsg_paxos_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_paxos_5fmsg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_paxos_5fmsg_2eproto = {
  false, false, descriptor_table_protodef_paxos_5fmsg_2eproto, "paxos_msg.proto", 447,
  &descriptor_table_paxos_5fmsg_2eproto_once, descriptor_table_paxos_5fmsg_2eproto_sccs, descriptor_table_paxos_5fmsg_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_paxos_5fmsg_2eproto::offsets,
  file_level_metadata_paxos_5fmsg_2eproto, 1, file_level_enum_descriptors_paxos_5fmsg_2eproto, file_level_service_descriptors_paxos_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_paxos_5fmsg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_paxos_5fmsg_2eproto)), true);
namespace elect {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaxosMsg_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_paxos_5fmsg_2eproto);
  return file_level_enum_descriptors_paxos_5fmsg_2eproto[0];
}
bool PaxosMsg_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PaxosMsg_Type PaxosMsg::NONE;
constexpr PaxosMsg_Type PaxosMsg::PREPARE_REQUEST;
constexpr PaxosMsg_Type PaxosMsg::PREPARE_REJECT;
constexpr PaxosMsg_Type PaxosMsg::PREPARE_ACCEPTED;
constexpr PaxosMsg_Type PaxosMsg::PREPARE_OPENING;
constexpr PaxosMsg_Type PaxosMsg::PROPOSE_REQUEST;
constexpr PaxosMsg_Type PaxosMsg::PROPOSE_ACCEPTED;
constexpr PaxosMsg_Type PaxosMsg::PROPOSE_REJECT;
constexpr PaxosMsg_Type PaxosMsg::LEAEN_CHOSEN;
constexpr PaxosMsg_Type PaxosMsg::ONLINE_TO_CONNECT;
constexpr PaxosMsg_Type PaxosMsg::Type_MIN;
constexpr PaxosMsg_Type PaxosMsg::Type_MAX;
constexpr int PaxosMsg::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void PaxosMsg::InitAsDefaultInstance() {
}
class PaxosMsg::_Internal {
 public:
};

PaxosMsg::PaxosMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:elect.PaxosMsg)
}
PaxosMsg::PaxosMsg(const PaxosMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_node_id(),
      GetArena());
  }
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addr().empty()) {
    addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_addr(),
      GetArena());
  }
  lease_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lease_owner().empty()) {
    lease_owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lease_owner(),
      GetArena());
  }
  ::memcpy(&proposal_id_, &from.proposal_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&proposal_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:elect.PaxosMsg)
}

void PaxosMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PaxosMsg_paxos_5fmsg_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lease_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&proposal_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&proposal_id_)) + sizeof(type_));
}

PaxosMsg::~PaxosMsg() {
  // @@protoc_insertion_point(destructor:elect.PaxosMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PaxosMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lease_owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PaxosMsg::ArenaDtor(void* object) {
  PaxosMsg* _this = reinterpret_cast< PaxosMsg* >(object);
  (void)_this;
}
void PaxosMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PaxosMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PaxosMsg& PaxosMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PaxosMsg_paxos_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void PaxosMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:elect.PaxosMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lease_owner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&proposal_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&proposal_id_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaxosMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .elect.PaxosMsg.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::elect::PaxosMsg_Type>(val));
        } else goto handle_unusual;
        continue;
      // string node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "elect.PaxosMsg.node_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "elect.PaxosMsg.addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 proposal_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 accepted_proposal_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          accepted_proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lease_owner = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_lease_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "elect.PaxosMsg.lease_owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 duration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 expire_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          expire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PaxosMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:elect.PaxosMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .elect.PaxosMsg.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "elect.PaxosMsg.node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_id(), target);
  }

  // string addr = 3;
  if (this->addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "elect.PaxosMsg.addr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_addr(), target);
  }

  // uint64 proposal_id = 4;
  if (this->proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_proposal_id(), target);
  }

  // uint64 accepted_proposal_id = 5;
  if (this->accepted_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_accepted_proposal_id(), target);
  }

  // string lease_owner = 6;
  if (this->lease_owner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lease_owner().data(), static_cast<int>(this->_internal_lease_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "elect.PaxosMsg.lease_owner");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_lease_owner(), target);
  }

  // uint64 duration = 7;
  if (this->duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_duration(), target);
  }

  // uint64 expire_time = 8;
  if (this->expire_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_expire_time(), target);
  }

  // uint64 version = 9;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:elect.PaxosMsg)
  return target;
}

size_t PaxosMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:elect.PaxosMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 2;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  // string addr = 3;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // string lease_owner = 6;
  if (this->lease_owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lease_owner());
  }

  // uint64 proposal_id = 4;
  if (this->proposal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_proposal_id());
  }

  // uint64 accepted_proposal_id = 5;
  if (this->accepted_proposal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accepted_proposal_id());
  }

  // uint64 duration = 7;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_duration());
  }

  // uint64 expire_time = 8;
  if (this->expire_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_expire_time());
  }

  // uint64 version = 9;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_version());
  }

  // .elect.PaxosMsg.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PaxosMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:elect.PaxosMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const PaxosMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PaxosMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:elect.PaxosMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:elect.PaxosMsg)
    MergeFrom(*source);
  }
}

void PaxosMsg::MergeFrom(const PaxosMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:elect.PaxosMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from.addr().size() > 0) {
    _internal_set_addr(from._internal_addr());
  }
  if (from.lease_owner().size() > 0) {
    _internal_set_lease_owner(from._internal_lease_owner());
  }
  if (from.proposal_id() != 0) {
    _internal_set_proposal_id(from._internal_proposal_id());
  }
  if (from.accepted_proposal_id() != 0) {
    _internal_set_accepted_proposal_id(from._internal_accepted_proposal_id());
  }
  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  if (from.expire_time() != 0) {
    _internal_set_expire_time(from._internal_expire_time());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void PaxosMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:elect.PaxosMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaxosMsg::CopyFrom(const PaxosMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:elect.PaxosMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaxosMsg::IsInitialized() const {
  return true;
}

void PaxosMsg::InternalSwap(PaxosMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  addr_.Swap(&other->addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lease_owner_.Swap(&other->lease_owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PaxosMsg, type_)
      + sizeof(PaxosMsg::type_)
      - PROTOBUF_FIELD_OFFSET(PaxosMsg, proposal_id_)>(
          reinterpret_cast<char*>(&proposal_id_),
          reinterpret_cast<char*>(&other->proposal_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PaxosMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace elect
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::elect::PaxosMsg* Arena::CreateMaybeMessage< ::elect::PaxosMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::elect::PaxosMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
